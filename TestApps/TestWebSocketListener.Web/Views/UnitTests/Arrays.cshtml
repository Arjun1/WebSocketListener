@{
    ViewBag.Title = "Arrays";
}

<h2>Arrays</h2>

<canvas id="c" width="200" height="200"></canvas>


<script>

    var canvas = document.getElementById("c");
    var context = canvas.getContext("2d");

    context.fillRect(10, 20, 200, 100);
    context.fillStyle = 'blue';
    context.fillRect(10, 20, 200, 100);

    // setup the line style
    context.strokeStyle = '#fa00ff';
    context.lineWidth = 5;
    context.lineCap = 'round';

    // draw the arc path
    // (I'll walk you through these values momentarily - bear with me!)
    context.arc(50, 50, 20, 0, Math.PI, false);

    // colour the path
    context.stroke();

    var img = context.getImageData(0, 0, 400, 320);
    var binary = new Uint8Array(img.data.length);
    for (var i = 0; i < img.data.length; i++) {
        binary[i] = img.data[i];
    }
   
    describe("Binary: ", function () {
        
        var ws = new WebSocket("ws://127.0.0.1:8001/","text");
        ws.binaryType = 'arraybuffer';

        it("Simple binary array test", function () {

            var result = new Uint8Array(0);

            var byteArray = new Uint8Array(4);
            byteArray[0] = 0x01;
            byteArray[1] = 0x10;
            byteArray[2] = 0xff;
            byteArray[3] = 0xde;

            ws.onmessage = function (event) {
                result = new Uint8Array(event.data);
            };

            runs(function () {
                ws.onopen = function (event) {
                    ws.send(byteArray.buffer);
                };
            });

            waitsFor(function () {
                return result.length == 4;
            }, "Error", 1000);

            runs(function () {
                expect(result[0]).toBe(0x01);
                expect(result[1]).toBe(0x10);
                expect(result[2]).toBe(0xff);
                expect(result[3]).toBe(0xde);
            });
        });

        it("Image binary array test", function () {

            var counter = 0;

            ws.onmessage = function (event) {
                counter += new Uint8Array(event.data).length;
            };

            runs(function () {
                //ws.onopen = function () {
                    ws.send(binary.buffer);
                //}
            });

            waitsFor(function () {
                //console.log(counter);
                return counter == binary.length;
            }, "Error", 1000);

            runs(function () {
                expect(binary.length).toBe(counter);
            });
        });
    });

</script>
