{"name":"WebSocketListener","tagline":"A light weight asynchronous WebSocket listener","body":"**WebSocketListener** is a light weight **WebSocket** server side connector, implemented in C# using *sockets*, according to the [RFC 6455](http://tools.ietf.org/html/rfc6455). It **does not use** the Microsoft's `System.Net.WebSockets` namespace. It should work in any operating system running *Microsoft .NET v4.5*.\r\n\r\n**WebSocketListener** has been designed to provide WebSocket connectivity to other applications, in the same way that `System.Net.TcpListener` provides TCP connectivity. It is not a communication framework on its own and it does not provide any kind of publisher/subscriber patern or reliable messaging beyond TCP.\r\n\r\n * It can work with both **Text or Binary** messages.\r\n * It supports `wss://` (WebSocket Secure through **TLS**).\r\n * It is **asynchronous**. \r\n * It has the **Ping/Pong** functionality **built-in**.\r\n * It detects and disconnects **half open connections**.\r\n * It allows to **send and receive messages as streams**. WebSocket messages are represented as delimited stream-like objects, that allows integration with other .NET objects like e.g. `StreamReader` and `StreamWriter`. Two different WebSocket messages, yield two different streams.\r\n * Messages reads and writes are streamed. Big messages are not held in memory during reads or writes.\r\n * It **handles partial frames transparently**. The WebSocket specification states that a single message can be sent across multiple individual frames. The message stream will allow to read all the message data, no matter if it was sent in a single or multiple frames.\r\n * It **handles interleaved control frames transparently**. The WebSocket specification states that control frames can appear interleaved with data frames, including between partial frames of the same message. The message stream will allow to read just the message data, it will skip the control frames.\r\n\r\nTake a look on the [performance and load  tests](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-performance-tests) on a simple 'echo' server.\r\n\r\n### Quickstart\r\n\r\n#### Install\r\n\r\n[WebSocketListener is available through NuGet](https://www.nuget.org/packages/vtortola.WebSocketListener/)\r\n\r\n```\r\nPM> Install-Package vtortola.WebSocketListener\r\n```\r\n\r\n#### Set up\r\nSetting up a server and start listening for clients is very similar to a `TcpListener`:\r\n\r\n```cs\r\nvar local = new IPEndPoint(IPAddress.Any, 8006);\r\nvar server = new WebSocketListener(local);\r\nserver.Start();\r\n```\r\n\r\nOptionally, you can also:\r\n * [enable TLS for secure WebSocket connections](https://github.com/vtortola/WebSocketListener/wiki/Enabling-WebSocket-Secure-(TLS)).\r\n * [customize subprotocols, queuing and ping behaviours](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-options).\r\n * [add customized extensions](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-Extensions).\r\n\r\n\r\n#### Accepting clients\r\nOnce the server has started, clients can be awaited asynchronously. When a client connects, a `WebSocket` object will be returned:\r\n\r\n```cs\r\nWebSocket client = await server.AcceptWebSocketAsync(cancellationToken);\r\n```\r\n\r\nThe client provides means to read and write messages. With the client, as in the underlying `NetworkStream`, is possible to write and read at the same time even from different threads, but is not possible to read from two or more threads at the same time, same for writing.\r\n\r\n`AcceptWebSocketAsync` should be in a loop to continuously accept new clients, also wraped in a `try/catch` since errors in the negotiation process will be thrown here. Take a look to the [simple host tutorial](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-Example).\r\n\r\n#### Receiving messages\r\nWith the client we can *await* a message as a readonly stream:\r\n\r\n```cs\r\nWebSocketMessageReadStream messageReadStream = await client.ReadMessageAsync(cancellationToken);\r\n```\r\n\r\nMessages are a stream-like objects, so is it possible to use regular .NET framework tools to work with them. The `WebSocketMessageReadStream.MessageType` property indicates the kind of content the message contains, so it can be used to select a different handling approach.\r\n\r\nThe returned `WebSocketMessageReadStream` object will contain information from the header, like type of message (Text or Binary) but not the message content, neither the message length, since a frame only contains the frame length rather than the total message length, therefore that information could be missleading.\r\n\r\nA text message can be read with a simple `StreamReader`.  It is worth remember that according to the WebSockets specs, it always uses UTF8 for text enconding:\r\n\r\n```cs\r\nif(messageReadStream.MessageType == WebSocketMessageType.Text)\r\n{\r\n   String msgContent = String.Empty.\r\n   using (var sr = new StreamReader(messageReadStream, Encoding.UTF8))\r\n        msgContent = await sr.ReadToEndAsync();\r\n}\r\n```\r\n\r\n```ReadMessageAsync``` should go in a loop, to read messages continuously. Writes and read can be performed at the same time. Take a look to the [simple host tutorial](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-Example).\r\n\r\nAlso, a binary message can be read using regular .NET techniques:\r\n\r\n```cs\r\nif(messageReadStream.MessageType == WebSocketMessageType.Binary)\r\n{\r\n   using (var ms = new MemoryStream())\r\n   {\r\n       await messageReader.CopyToAsync(ms);\r\n   }\r\n}\r\n```\r\n\r\n#### Sending messages\r\nWriting messages is also easy. The `WebSocketMessageReadStream.CreateMessageWriter` method allows to create a write only  message:\r\n\r\n```cs\r\nusing (WebSocketMessageWriteStream messageWriterStream = client.CreateMessageWriter(WebSocketMessageType.Text))\r\n```\r\n\r\nIt is important to point out, that despite of the length of the message, the last part won't be sent till the stream is closed (call to `Stream.Close`) or flushed asynchronously. So disposing the message is the more practical way of ensuring that `Stream.Close` is called, but that would send the tail of the message synchronously, so calling `Stream.FlushAsync` will ensure that the last part is sent asynchronously. This allows the sending of arbitrary amounts of data which length is not known before hand.\r\n\r\nOnce a message writer is created, regular .NET tools can be used to write in it:\r\n\r\n```cs\r\nusing (var sw = new StreamWriter(messageWriterStream, Encoding.UTF8))\r\n{\r\n   await sw.WriteAsync(\"Hello World!\");\r\n   await sw.FlushAsync();\r\n}\r\n```    \r\n\r\nAlso binary messages:\r\n\r\n```cs\r\nusing (var messageWriter = ws.CreateMessageWriter(WebSocketMessageType.Binary))\r\n   await myFileStream.CopyToAsync(messageWriter);\r\n```\r\n\r\n#### Example\r\nCheck a [simplified example](https://github.com/vtortola/WebSocketListener/wiki/WebSocketListener-Example) or download the [EchoServer from the samples](https://github.com/vtortola/WebSocketListener/tree/master/samples/EchoServer).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}